'''
Алгоритм, реализованный в этой функции, заключается в проходе списка дважды: 

сначала слева направо, а затем справа налево. В первом проходе для каждого элемента вычисляется расстояние от него до ближайшего нуля слева,

а во втором проходе - расстояние до ближайшего нуля справа. Для хранения расстояний используется список result, 

который инициализируется значением inf для всех элементов.

Во время прохода каждый раз проверяется, является ли текущий элемент нулем. Если да, то расстояние сбрасывается в ноль. 

Затем для каждого элемента вычисляется минимальное расстояние как минимум из расстояния, которое уже было вычислено в прошлом, и нового расстояния, 

которое равно количеству элементов от текущего до элемента, равного нулю.

Таким образом, используется алгоритм, работающий за линейное время, то есть время выполнения пропорционально количеству элементов во входном списке.
'''


from typing import List


def nearest_zero(num: List) -> List[int]:
    '''Функция получает на вход список целых чисел num.
    А возвращает список длины n, где n - длина входного списка num.
    Каждый элемент списка - это минимальное расстояние между соответствующим элементом списка num и ближайшим нулём.
    '''
    n = len(num)
    nearest_symbol = '0'
    result = [float('inf')] * n
    left_distance = float('inf')
    right_distance = float('inf')
    for i in range(n):
        if num[i] == nearest_symbol:
            left_distance = 0
        result[i] = min(result[i], left_distance)
        left_distance += 1
    for i in range(n-1, -1, -1):
        if num[i] == nearest_symbol:
            right_distance = 0
        result[i] = min(result[i], right_distance)
        right_distance += 1
    return result


if __name__ == '__main__':
    input()
    print(*nearest_zero(input().split()), sep = ' ')